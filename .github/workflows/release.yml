name: Package Application with cx_Freeze

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (semantic)"
        required: true
        default: "X.X"

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [ 'x64', 'x86' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
          cache: 'pip'
          cache-dependency-path: 'poetry.lock'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .
          pip install cx-Freeze
      - name: Download ffmpeg
        run: |
          Invoke-WebRequest https://github.com/GyanD/codexffmpeg/releases/download/5.1/ffmpeg-5.1-essentials_build.zip -O ffmpeg.zip
          tar.exe -xf ffmpeg.zip
          move ffmpeg-5.1-essentials_build/bin/ffmpeg.exe ffmpeg.exe
          move ffmpeg-5.1-essentials_build/bin/ffprobe.exe ffprobe.exe
      - run: python setup.py build -b dist
      - run: tar.exe -acf TranscribeArabic-${{ runner.os }}-${{ matrix.architecture }}-portable.zip dist
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-${{ runner.os }}-${{ matrix.architecture }}-portable
          path: TranscribeArabic-${{ runner.os }}-${{ matrix.architecture }}-portable.zip
  build-windows-msi:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [ 'x64', 'x86' ]
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      LC_CTYPE: C.UTF-8
      PYTHONIOENCODING: UTF-8
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
          cache: 'pip'
          cache-dependency-path: 'poetry.lock'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .
          pip install cx-Freeze
      - name: Download ffmpeg
        run: |
          Invoke-WebRequest https://github.com/GyanD/codexffmpeg/releases/download/5.1/ffmpeg-5.1-essentials_build.zip -O ffmpeg.zip
          tar.exe -xf ffmpeg.zip
          move ffmpeg-5.1-essentials_build/bin/ffmpeg.exe ffmpeg.exe
          move ffmpeg-5.1-essentials_build/bin/ffprobe.exe ffprobe.exe
      - run: python setup.py build bdist_msi
#      - run: mv 'dist/*.msi' TranscribeArabic-${{ runner.os }}-${{ matrix.architecture }}.msi
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-${{ runner.os }}-${{ matrix.architecture }}.msi
          path: 'dist/*.msi'
  build-macos-dmg:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: 'poetry.lock'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .
          pip install cx-Freeze
      - name: Run cx_Freeze
        run: python setup.py bdist_dmg
#      - run: mv 'build/Install Transcribe Arabic.dmg' TranscribeArabic-macOS.dmg
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-macOS.dmg
          path: build/Install Transcribe Arabic.dmg
  build-macos-app:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: 'poetry.lock'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .
          pip install cx-Freeze
      - name: Run cx_Freeze
        run: python setup.py bdist_mac
#      - run: mv build/TranscribeArabic.app TranscribeArabic-macOS.app
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-macOS.app
          path: build/TranscribeArabic.app
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package CLI Application for Linux
        uses: yshalsager/pyinstaller-action-linux@main
        with:
          path: .
          spec: wit_transcriber.spec
          requirements: requirements.txt
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-Linux-CLI
          path: dist/linux/wit_transcriber

      - name: Package GUI Application for Linux
        uses: yshalsager/pyinstaller-action-linux@tkinter
        with:
          path: .
          spec: wit_transcriber_gui.spec
          requirements: requirements.txt
          tkinter: true
      - uses: actions/upload-artifact@v3
        with:
          name: TranscribeArabic-Linux-GUI
          path: dist/linux/wit_transcriber_gui
  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-windows-msi, build-macos-dmg, build-macos-app, build-linux]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
    - name: Display structure of downloaded files
      run: ls -R
    - name: Release
      uses: ncipollo/release-action@v1.10.0
      with:
        allowUpdates: true
        commit: 'master'
        tag: ${{ github.event.inputs.version }}
        name: ${{ github.event.inputs.version }}
        artifacts: 'TranscribeArabic-*/TranscribeArabic-*, TranscribeArabic-*/wit_transcriber, TranscribeArabic-*/wit_transcriber_gui'
